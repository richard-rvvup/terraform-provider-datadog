{%- macro baseRequestAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- if schema|is_primitive %}
        {{ basePrimitiveAttrBuilder(name=name, schema=schema, baseSetter=baseSetter, required=required) }}
    {%- elif schema.type == "object" %}
    {%- elif schema.type == "array" %}
        {{ baseArrayAttrBuilder(name=name, schema=schema, baseSetter=baseSetter, required=required) }}
    {%- endif %}
{%- endmacro %}

{%- macro basePrimitiveAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- if required %}
        {{ baseSetter }}.Set{{ name|camel_case }}(d.Get("{{ name }}").({{ schema|simple_type }}))
    {%- else %}
        if {{ name|variable_name }}, ok := d.GetOk("{{ name }}"); ok {
            {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }}.({{ schema|simple_type }}))
        }
    {%- endif %}
{%- endmacro %}

{%- macro basePrimitiveAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- set simpleType = schema|simple_type %}
    {%- if required %}
        {%- if simpleType in ["int", "string", "bool"] %}
            {{ baseSetter }}.Set{{ name|camel_case }}(d.Get("{{ name }}").({{ simpleType }}))
        {%- elif simpleType == "int64" %}
            {{ attr|variable_name }}, _ := strconv.ParseInt(d.Get("{{ name }}"), 10, 64)
            {{ baseSetter }}.Set{{ name|camel_case }}({{ attr|variable_name }})
        {%- endif %}
    {%- else %}
        if {{ name|variable_name }}, ok := d.GetOk("{{ name }}"); ok {
        {%- if simpleType in ["int", "string", "bool"] %}
            {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }}.({{ simpleType }}))
        {%- elif simpleType == "int64" %}
            {{ attr|variable_name }}, _ := strconv.ParseInt({{ name|variable_name }}, 10, 64)
            {{ baseSetter }}.Set{{ name|camel_case }}({{ attr|variable_name }})
        {%- endif %}
        }
    {%- endif %}
{%- endmacro %}

{%- macro baseArrayAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- set itemSchema = schema.get("items") %}
    {%- if itemSchema|is_primitive %}
        {{ name|variable_name }} := []{{ itemSchema|simple_type }}{}
        for _, s := range d.Get("{{ name }}").([]interface{}) {
             {{ name|variable_name }} = append( {{ name|variable_name }}, s.({{ itemSchema|simple_type }}))
        }
        {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
    {%- elif itemSchema.type == "object" %}
        {{ name|variable_name }} := []datadog{{ version|upperfirst }}.{{ get_type(itemSchema) }}{}

        for _, s := range d.Get("{{ name }}").([]map[string]interface{}) {
            {{ name|variable_name }}Item := datadog{{ version|upperfirst }}.New{{ get_type(itemSchema) }}WithDefaults()
            {%- for attr, attrSchema in itemSchema.get("properties").items() %}
                {%- set isRequired = attr in itemSchema.get("required", []) %}
                {{- objectFromMapBuilder(attr, attrSchema, name|variable_name~"Item", required=isRequired) }}
            {%- endfor %}

            {{ name|variable_name }} = append({{ name|variable_name }}, *{{ name|variable_name }}Item)
        }

        {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
    {%- endif %}
{%- endmacro %}

{%- macro objectFromMapBuilder(name, schema, baseSetter, required=False) %}
    {%- if schema|is_primitive %}
        {{ baseSetter }}.Set{{ name|camel_case }}(s["{{ name }}"].({{ get_type(schema) }}))
    {%- elif schema.type == "object" %}
        {{ name|variable_name }} := datadog{{ version|upperfirst }}.New{{ get_type(itemSchema) }}WithDefaults()
        {%- for attr, attrSchema in itemSchema.get("properties").items() %}
            {%- set isRequired = attr in itemSchema.get("required", []) %}
            {{- objectFromMapBuilder(attr, attrSchema, name|variable_name~"Item", required=isRequired) }}
        {%- endfor %}
        {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
    {%- elif schema.type == "array" %}

    {%- endif %}
{%- endmacro %}