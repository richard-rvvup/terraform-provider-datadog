{%- macro baseStateSetter(name, schema, baseAccessor="resp", required=False) %}
    {%- if schema|is_primitive %}
        {{- typePremitiveStateSetter(name, schema, baseAccessor=baseAccessor, required=required) }}
    {%- elif schema.type == "object" %}
        {{- typeObjectStateSetter(name, schema, baseAccessor=baseAccessor, required=required) }}
    {%- elif schema.type == "array" %}
        {{- typeArrayStateSetter(name, schema, baseAccessor=baseAccessor, required=required) }}
    {%- endif %}
{%- endmacro %}

{%- macro typePremitiveStateSetter(name, schema, baseAccessor="resp", required=False) %}
    {%- if required %}
        if err := d.Set("{{ name }}", {{ baseAccessor }}.Get{{ name|camel_case }}()); err != nil {
            return diag.FromErr(err)
        }
    {%- else %}
		if {{ name|variable_name }}, ok := {{ baseAccessor }}.Get{{ name|camel_case }}Ok(); ok {
            if err := d.Set("{{ name }}", {{ name|variable_name }}); err != nil {
                return diag.FromErr(err)
            }
		}
    {%- endif %}
{%- endmacro %}

{%- macro typeObjectStateSetter(name, schema, baseAccessor="resp", required=False) %}
    {{ name|variable_name }}Dd = {{ baseAccessor }}.Get{{ name|camel_case }}
    {{ name|variable_name }}Tf := map[string]interface{}

    {%- for attr, childSchema in schema.get("properties", {}).items() %}
        {%- if childSchema|is_primitive %}
            if {{ attr|variable_name }}, ok := {{ name|variable_name }}Dd.Get{{ attr|camel_case }}Ok(); ok {
                {{ name|variable_name }}Tf["{{ attr }}"] = *{{ attr|variable_name }}
            }
        {%- elif childSchema.type == "object" %}
        {%- elif childSchema.type == "array" %}
        {%- endif %}
    {%- endfor%}

    if err := d.Set("{{ name }}", []interface{}{% raw %}{{% endraw %} {{ name|variable_name }}Tf{% raw %}}{% endraw %}); err != nil {
        return diag.FromErr(err)
    }

{%- endmacro %}

{%- macro typeArrayStateSetter(name, schema, baseAccessor="resp", required=False) %}
    {%- set itemSchema = schema.get("items") %}
    {%- if itemSchema|is_primitive %}
        {%- if required %}
            if err := d.Set("{{ name }}", {{ baseAccessor }}.Get{{ name|camel_case }}()); err != nil {
                return diag.FromErr(err)
            }
        {%- else %}
            if {{ name|variable_name }}, ok := {{ baseAccessor }}.Get{{ name|camel_case }}Ok(); ok && len(*{{ name|variable_name }}) > 0 {
                if err := d.Set("{{ name }}", *{{ name|variable_name }}); err != nil {
                    return diag.FromErr(err)
                }
            }

        {%- endif %}
    {%- elif itemSchema.type == "object" %}
        {{ name|variable_name }}Tf := make([]map[string]interface{}, 0)
        for _, {{ name|variable_name }}Dd := range {{ baseAccessor }}.Get{{ name|camel_case }}() {
            {{ name|variable_name }}TfItem := map[string]interface{}{}

            {{- tfListBuilderHelper(itemSchema, name|variable_name ~ "Tf", name|variable_name ~ "Dd") }}

            {{ name|variable_name }}Tf = append({{ name|variable_name }}Tf, {{ name|variable_name }}TfItem)

        }
        if err := d.Set("{{ name }}", {{ name|variable_name }}Tf); err != nil {
            return diag.FromErr(err)
        }
    {%- endif %}
{%- endmacro %}

{%- macro tfListBuilderHelper(schema, parent, baseAccessor) %}
    {%- for attr, attrSchema in schema.properties.items() %}
        {%- if attrSchema|is_primitive %}
            {{ parent }}Item["{{ attr }}"] = {{ baseAccessor }}.Get{{ attr|camel_case }}()
        {%- elif attrSchema.type == "array" %}
            {%- if attrSchema.get("items")|is_primitive %}
                {{ parent }}Item["{{ attr }}"] = {{ baseAccessor }}.Get{{ attr|camel_case }}()
            {%- else %}
{#                {{ attr|variable_name }}TfItem := map[string]interface{}{}

                {{- tfListBuilderHelper(attrSchema.get("items"), attr|variable_name ~ "Tf", attr|variable_name ~ "Dd") }}

                {{ attr|variable_name }}Tf = append({{ attr|variable_name }}Tf, {{ attr|variable_name }}TfItem) #}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
{%- endmacro %}