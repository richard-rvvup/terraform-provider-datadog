func resourceDatadog{{ name|camel_case }}Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	providerConf := meta.(*ProviderConfiguration)
	apiInstances := providerConf.DatadogApiInstances
	auth := providerConf.Auth
	{%- for paramName, param in createOperationParams.items() %}
		{%- set paramSchema = get_terraform_schema_type(param|parameter_schema) %}
		{% if paramName == "body" %}
		body := build{{ name|camel_case }}RequestBody(d)
		{%- else%}
		{{ paramName|variable_name }} = d.Get("{{ paramName }}").({{ paramSchema|simple_type }}))
		{%- endif%}
	{%- endfor %}

	resp, httpresp, err := apiInstances.Get{{ apiName }}{{ version|upperfirst }}().{{ createOperationId }}(auth, {% for paramName, param in createOperationParams.items() %}{% if paramName == "body" %}*{% endif %}{{ paramName|variable_name }}, {% endfor%})
	if err != nil {
		return utils.TranslateClientErrorDiag(err, httpresp, "error creating {{ name|camel_case }}")
	}
	if err := utils.CheckForUnparsed(resp); err != nil {
		return diag.FromErr(err)
	}
	d.SetId(resp.Data.GetId())

	return update{{ name|camel_case }}State(d, &resp)
}

func build{{ name|camel_case }}RequestBody(d *schema.ResourceData) *datadog{{ version|upperfirst }}.{{ get_type_for_parameter(createOperationParams["body"]) }} {
	{%- set parameterBodySchema = createOperationParams["body"]|parameter_schema %}
	{%- if parameterBodySchema|is_json_api %}
		// JSON API
	{%- endif %}

	return nil
}